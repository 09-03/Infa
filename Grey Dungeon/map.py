import pygame
from numba.core import types
from numba.typed import Dict
from numba import int32


_ = False
matrix_map = [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, _, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,],
    [1, _, _, _, 3, _, _, _, 1, 1, _, _, _, _, 2, 2, _, _, _, _, _, _, _, 2,],
    [1, _, _, _, 1, _, _, _, 1, 1, 1, 1, _, _, 2, 2, _, _, _, _, 4, 2, _, 4,],
    [3, _, _, _, 1, _, _, _, _, _, _, _, _, 2, 2, _, _, _, _, _, 2, 4, _, 2,],
    [1, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 2,],
    [1, _, _, _, _, _, _, _, 2, 4, _, _, _, _, _, _, _, 2, 2, 2, 2, 2, 2, 2,],
    [1, _, _, _, _, _, _, _, _, 2, 2, _, _, _, _, _, _, _, _, _, _, _, _, 2,],
    [1, _, _, _, _, _, _, _, _, _, 4, _, _, 1, _, _, _, _, _, _, _, _, _, 4,],
    [3, _, _, _, _, _, _, _, _, _, 2, _, _, 3, _, _, _, _, _, _, _, _, _, 2,],
    [1, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, 2,],
    [1, 1, 1, 1, 1, 1, 1, _, _, _, _, _, _, _, 3, 1, _, _, _, _, _, _, _, 2,],
    [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 2, _, _, _, 2,],
    [1, _, 3, 1, _, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, 2, _, _, _, 4,],
    [3, _, 1, 3, _, _, _, _, 1, 1, _, _, 2, 2, 2, 2, _, _, _, 2, _, _, _, 2,],
    [1, _, _, _, _, _, _, _, 1, 1, _, _, _, _, 2, 2, _, _, _, 4, _, _, _, 2,],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, _, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2,]
    ]

WORLD_WIDTH = len(matrix_map[0]) * 100
WORLD_HEIGHT = len(matrix_map) * 100
world_map = Dict.empty(key_type=types.UniTuple(int32, 2), value_type=int32)
collision_walls = []
for j, row in enumerate(matrix_map):
    for i, char in enumerate(row):
        if char:
            collision_walls.append(pygame.Rect(i * 100, j * 100, 100, 100))
            if char == 1:
                world_map[(i * 100, j * 100)] = 1

            elif char == 2:
                world_map[(i * 100, j * 100)] = 2

            elif char == 3:
                world_map[(i * 100, j * 100)] = 3

            elif char == 4:
                world_map[(i * 100, j * 100)] = 4
