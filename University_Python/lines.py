"""
На прямой даны N отрезков (в реальной жизни это могут быть промежутки времени, например),
которые заданы координатами их левого и правого конца.
Для каждого данного отрезка необходимо узнать, сколько из данных отрезков полностью находятся в нем.
Один отрезок полностью содержится во втором, если левый конец первого отрезка находится правее левого конца второго отрезка,
а правый конец первого находится левее правого конца второго.
Предложите как можно более эффективный способ решения этой задачи.
Гарантируется, что все концы данных отрезков различны.
"""
lines = [[-1,2],[0,3],[-5,10],[1,4],[7,11],
         [5,6],[-7,8],[-6,9],[-9,15],[12,13]]


def lines_in_line(lines, given_line): # Итого O(nlogn) + O(n) + O(n) + O(n) = O(nlogn)
    lines.sort(key = lambda line: line[0]) # O(nlogn)
    for line in lines: # O(n)
        if line == given_line:
            i = lines.index(line) # O(n)
            j=i+1

    if j >= len(lines):
        return print("Ends")

    while lines[j][0]<lines[i][1]: # O(n)
        if lines[j][1]<lines[i][1]:
            print(f"Отрезок {lines[j]} содержиться в отрезке {lines[i]}")

        j+=1
        if j >= len(lines):
            break

    print("End")

lines_in_line(lines, lines[2])
